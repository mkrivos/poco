language: cpp

cache:
  - apt

branches:
  except:
    - /.*pp.eyor.*/
    - /.*Merge.*/

git:
  submodules: false

before_install:
  - git submodule update --init --recursive --remote
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update  -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y libpcre3-dev libssl-dev libexpat1-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y libpq-dev unixodbc-dev libmysqlclient-dev libsqlite3-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y sloccount cppcheck ninja-build; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update  -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y gcc-5 g++-5; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo bash -c "cat >> /etc/apt/sources.list" < build/script/clang.apt; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update  -qq; fi


services:
  - mongodb
  - redis-server
  - postgresql
  - mysql

dist: xenai
sudo: enabled

addons:
  postgresql: "9.4"


notifications:
    email:
      on_success: never # default: change
      on_failure: always # default: always
    slack:
      rooms:
        secure: "b3/wLril+ga4p1iIDMbKkodPhvpG5cY/Fp73kqEonVKAtm9omHxQIprBygq0Hl7ZkRFF1Czs73mkCNHXGQLnYfX7EEr8Qk56s3y2AaUzDgWLuFbKk3XxUf1zExdF0HRm3WMoGz54sSsnDLm+MOhwTxoTdAbavJHaQHMtlAkLIQo="
      on_success: never # default: change
      on_failure: always # default: always

env:
  global:
    test=""
    POCO_VERBOSE=1

before_script:
 - export PATH=/usr/lib/postgresql/9.4/bin:$PATH
 - echo ${test}
 - chmod 755 ./travis/Linux/runtests.sh
 - chmod 755 ./travis/OSX/runtests.sh
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql -u root -e 'create database pocotestdb;'; fi
 - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql --version; fi
 # - if [ "$TRAVIS_OS_NAME" == "linux" ]; then postgres --version; fi
 - sqlite3 -version

matrix:
  fast_finish: true

  include:
    - env:    test="android API level 19 armeabi-v7a"
      addons:
        apt:
          packages:
            - openjdk-8-jdk
      before_install:
        - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        - wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
        - unzip -qq sdk-tools-linux-4333796.zip -d /opt/android-sdk
        - rm sdk-tools-linux-4333796.zip
        - echo "y" | /opt/android-sdk/tools/bin/sdkmanager "platform-tools" "system-images;android-24;default;armeabi-v7a" "platforms;android-24" "emulator" "ndk-bundle" "cmake;3.10.2.4988404" > /dev/null
      before_script:
        - export TERM=dumb
        - export _NO_CHECK_SIGNATURE=true
        - export ANDROID_SDK_ROOT=/opt/android-sdk
        - echo no | /opt/android-sdk/tools/bin/avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
        - /opt/android-sdk/emulator/emulator -avd test -no-audio -no-window -dns-server 8.8.8.8 &
        #- android-wait-for-emulator || android-wait-for-emulator
        - /opt/android-sdk/platform-tools/adb shell input keyevent 82 &
      script:
        # Mandatory cmake parameter to set API level and platform for the android toolchain:
        # /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-22
        # See also in /usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake

        # Using the ninja build command. Is much faster then make build command.
        - /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake -H. -Bcmake-build -GNinja 
          -DANDROID_ABI=armeabi-v7a 
          -DCMAKE_BUILD_TYPE=Release 
          -DCMAKE_TOOLCHAIN_FILE=/opt/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake 
          -DANDROID_PLATFORM=android-19 
          -DCMAKE_MAKE_PROGRAM=/opt/android-sdk/cmake/3.10.2.4988404/bin/ninja 
          -DANDROID_STL="c++_static" 
          -DANDROID_CPP_FEATURES="exceptions rtti" 
          -DPOCO_ENABLE_APACHECONNECTOR=OFF 
          -DPOCO_ENABLE_NETSSL=OFF 
          -DPOCO_ENABLE_CRYPTO=OFF 
          -DPOCO_ENABLE_SQL_MYSQL=OFF 
          -DPOCO_ENABLE_SQL_POSTGRESQL=OFF 
          -DPOCO_ENABLE_TESTS=ON 
          -DPOCO_ENABLE_LONG_RUNNING_TESTS=OFF 
          -DPOCO_OLD_REDIS_VERSION=ON &&
          /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake --build cmake-build --target all #&&
          #cd cmake-build && travis_wait 30 /opt/android-sdk/cmake/3.10.2.4988404/bin/ctest -E Foundation --output-on-failure FIXME Android emulator hangs

    - env:    test="android API level 24 arm64-v8a"
      addons:
        apt:
          packages:
            - openjdk-8-jdk
      before_install:
        - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        - wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
        - unzip -qq sdk-tools-linux-4333796.zip -d /opt/android-sdk
        - rm sdk-tools-linux-4333796.zip
        - echo "y" | /opt/android-sdk/tools/bin/sdkmanager "platform-tools" "system-images;android-24;default;arm64-v8a" "platforms;android-24" "emulator" "ndk-bundle" "cmake;3.10.2.4988404" > /dev/null
      before_script:
        - export TERM=dumb
        - export _NO_CHECK_SIGNATURE=true
        - export ANDROID_SDK_ROOT=/opt/android-sdk
        - echo no | /opt/android-sdk/tools/bin/avdmanager create avd -n test -k "system-images;android-24;default;arm64-v8a"
        - /opt/android-sdk/emulator/emulator -avd test -no-audio -no-window -dns-server 8.8.8.8 &
        #- android-wait-for-emulator || android-wait-for-emulator
        - /opt/android-sdk/platform-tools/adb shell input keyevent 82 &
      script:
        # Mandatory cmake parameter to set API level and platform for the android toolchain:
        # /usr/local/android-sdk/cmake/3.6.4111459/bin/cmake -DCMAKE_TOOLCHAIN_FILE=/usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-22
        # See also in /usr/local/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake

        # Using the ninja build command. Is much faster then make build command.
        - /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake -H. -Bcmake-build -GNinja 
          -DANDROID_ABI=arm64-v8a 
          -DCMAKE_BUILD_TYPE=Release 
          -DCMAKE_TOOLCHAIN_FILE=/opt/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake 
          -DANDROID_PLATFORM=android-24 
          -DCMAKE_MAKE_PROGRAM=/opt/android-sdk/cmake/3.10.2.4988404/bin/ninja 
          -DANDROID_STL="c++_static" 
          -DANDROID_CPP_FEATURES="exceptions rtti" 
          -DPOCO_ENABLE_APACHECONNECTOR=OFF 
          -DPOCO_ENABLE_NETSSL=OFF 
          -DPOCO_ENABLE_CRYPTO=OFF 
          -DPOCO_ENABLE_SQL_MYSQL=OFF 
          -DPOCO_ENABLE_SQL_POSTGRESQL=OFF 
          -DPOCO_ENABLE_TESTS=ON 
          -DPOCO_ENABLE_LONG_RUNNING_TESTS=OFF 
          -DPOCO_OLD_REDIS_VERSION=ON &&
          /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake --build cmake-build --target all #&&
          #cd cmake-build && travis_wait 30 /opt/android-sdk/cmake/3.10.2.4988404/bin/ctest -E Foundation --output-on-failure FIXME Android emulator hangs

#    - env:    test="x86 (make) bundled"
#      os: osx
#      compiler: clang
#      script:
#        - export CC="clang"
#        - export CXX="clang++"
#        - $CXX --version
#        - $CXX -x c++ /dev/null -dM -E
#        - ./configure --config=Darwin32-clang-libc++ --everything --omit=PDF,Crypto,NetSSL_OpenSSL,SQL/ODBC,SQL/MySQL,SQL/PostgreSQL
#        - make all -s -j2 && sudo make install && export OSARCH=i386 && sudo -s ./travis/OSX/runtests.sh

    - env:    test="x64 (make) bundled"
      os: osx
      compiler: clang
      script:
        - export CC="clang"
        - export CXX="clang++"
        - $CXX --version
        - $CXX -x c++ /dev/null -dM -E
        - ./configure --config=Darwin64-clang-libc++ --everything --omit=PDF,SQL/ODBC,SQL/MySQL,SQL/PostgreSQL
        - make all -s -j2 && sudo make install && sudo -s ./travis/OSX/runtests.sh

 #   - env:    test="5.4 x86 (make) bundled"
 #     compiler: gcc
 #     script:
 #       - sudo apt-get install -qq -y g++-5-multilib
 #       - export CC="gcc-5"
 #       - export CXX="g++-5"
 #       - $CXX --version
 #       - ./configure --config=Linux32-gcc --everything --omit=PDF,Crypto,NetSSL_OpenSSL,SQL/ODBC,SQL/MySQL,SQL/PostgreSQL
 #       - make all -s -j2 && sudo make install && export OSARCH=x86 && sudo -s ./travis/Linux/runtests.sh

    - env:    test="5.4 x64 (make) bundled"
      compiler: gcc
      script:
        - export CC="gcc-5"
        - export CXX="g++-5"
        - $CXX --version
        - ./configure --config=Linux64-gcc --everything --omit=PDF
        - make all -s -j2 && sudo make install && sudo -s ./travis/Linux/runtests.sh

    #- env:    test="5.4 (make) unbundled"
    #  ======================================= unit tests fail ures due to unbundled pcre
    # There was 1 error:
    #  1: N7CppUnit10TestCallerI21RegularExpressionTestEE.testSubst2
    #     "St9bad_alloc: std::bad_alloc"
    #     in "<unknown>", line -1
    #
    # There were 4 failures:
    #  1: N7CppUnit10TestCallerI21RegularExpressionTestEE.testMatch4
    #     "re.match("123 456", 0, matches) == 3"
    #     in "src/RegularExpressionTest.cpp", line 103
    #  2: N7CppUnit10TestCallerI21RegularExpressionTestEE.testMatch6
    #     "expr.match("abcde", 0, 0)"
    #     in "src/RegularExpressionTest.cpp", line 136
    #  3: N7CppUnit10TestCallerI21RegularExpressionTestEE.testSplit2
    #     "re.split("123 456", 0, strings) == 3"
    #     in "src/RegularExpressionTest.cpp", line 184
    #  4: N7CppUnit10TestCallerI21RegularExpressionTestEE.testGroup
    #     "re.match("abcd 1234", 0, matches) == 3"
    #     in "src/RegularExpressionTest.cpp", line 271
    #
    # failed=Foundation
    #  =======================================
    #  compiler: gcc
    #  script:
    #    - sudo apt-get install -qq -y gcc-5 g++-5
    #    - export CC="gcc-5"
    #    - export CXX="g++-5"
    #    - $CXX --version
    #    - ./configure --everything --omit=PDF --unbundled && make all -s -j2 && ./travis/Linux/runtests.sh

    - env:    test="4.9 x64 (CMake)"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y gcc-4.9 g++-4.9
        - export CC="gcc-4.9"
        - export CXX="g++-4.9"
        - $CXX --version
        - type cmake
        - type ctest
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - cmake -H. -Bcmake-build -GNinja -DCMAKE_BUILD_TYPE=Debug -DPOCO_ENABLE_PDF=OFF -DPOCO_ENABLE_TESTS=ON -DPOCO_ENABLE_SAMPLES=ON && cmake --build cmake-build && cd cmake-build && sudo /usr/local/cmake-3.12.4/bin/ctest -VV && cd ..


#    - env:    test="4.0 x86 (make) bundled"
#      compiler: clang
#      script:
#        - sudo apt-get install -qq -y clang-4.0 lldb-4.0 libc++-dev libc++abi-dev
#        - sudo apt-get install -qq -y g++-5-multilib
#        - export CLANG_VERSTION="-4.0"
#        - export CC="clang-4.0"
#        - export CXX="clang++-4.0"
#        - $CXX --version
#        - ./configure --config=Linux32-clang --everything --omit=PDF,Crypto,NetSSL_OpenSSL,SQL/ODBC,SQL/MySQL,SQL/PostgreSQL
#        - make all -s -j2 && sudo make install && export OSARCH=x86 && sudo -s ./travis/Linux/runtests.sh

    - env:    test="4.0 x64 (make) bundled"
      compiler: clang
      script:
        - sudo apt-get install -qq -y clang-4.0 lldb-4.0 libc++-dev libc++abi-dev
        - export CLANG_VERSTION="-4.0"
        - export CC="clang-4.0"
        - export CXX="clang++-4.0"
        - $CXX --version
        - ./configure --config=Linux64-clang --everything --omit=PDF
        - make all -s -j2 && sudo make install && sudo -s ./travis/Linux/runtests.sh

    - env:    test="6.0 x64 (make) bundled"
      compiler: clang
      script:
        - sudo apt-get install -qq -y clang-6.0 lldb-6.0 libc++-dev libc++abi-dev
        - export CLANG_VERSTION="-6.0"
        - export CC="clang-6.0"
        - export CXX="clang++-6.0"
        - $CXX --version
        - ./configure --config=Linux64-clang --everything --omit=PDF
        - make all -s -j2 && sudo make install && sudo -s ./travis/Linux/runtests.sh

    - env:    test="arm-linux-gnueabi-g++ (make)"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf
        - arm-linux-gnueabi-g++ --version
        - arm-linux-gnueabi-g++ -x c++ /dev/null -dM -E
        - ./configure --omit=PDF,SQL/ODBC,SQL/MySQL,SQL/PostgreSQL,Crypto,NetSSL,PageCompiler && make -s -j2  CROSS_COMPILE=arm-linux-gnueabi- POCO_TARGET_OSARCH=armv7l

    #- env:    test="(CMake)"
    #  compiler: clang
    #  script:
    #    - source ./travis/ignored.sh
    #    - export POCO_BASE=`pwd`
    #    - mkdir cmake-build && cd cmake-build && cmake  -DENABLE_PDF=OFF -DENABLE_TESTS=ON .. && make -s -j2 && sudo /usr/local/cmake-3.12.4/bin/ctest -VV -E SQL && cd ..

    #- env:    test="arm-linux-gnueabi-g++ (CMake)"
    #  ======================================= "arm-linux-gnueabi-g++: version 4.7.0: non compliant to c++11
    #  compiler: gcc
    #  script:
    #    - sudo apt-get install -qq -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf
    #    - export CC="arm-linux-gnueabi-gcc"
    #    - export CXX="arm-linux-gnueabi-g++"
    #    - $CXX --version
    #    - source ./travis/ignored.sh
    #    - export POCO_BASE=`pwd`
    #    - mkdir cmake-build
    #    - cd cmake-build && cmake  -DPOCO_ENABLE_PDF=OFF -DPOCO_ENABLE_NETSSL=OFF -DPOCO_ENABLE_CRYPTO=OFF -DPOCO_ENABLE_TESTS=ON .. && make -s -j2 && cd ..

    - env:    test="arm-linux-gnueabihf-g++ (CMake)"
      compiler: gcc
      script:
        - sudo apt-get install -qq -y g++-arm-linux-gnueabi g++-arm-linux-gnueabihf
        - export CC="arm-linux-gnueabihf-gcc"
        - export CXX="arm-linux-gnueabihf-g++"
        - $CXX --version
        - source ./travis/ignored.sh
        - export POCO_BASE=`pwd`
        - cmake -H. -Bcmake-build -GNinja -DPOCO_ENABLE_PDF=OFF -DPOCO_ENABLE_NETSSL=OFF -DPOCO_ENABLE_CRYPTO=OFF -DPOCO_ENABLE_TESTS=ON && cmake --build cmake-build --target all


    # QA jobs for code analytics and metrics
    # build documentation and release
    - env:    test="documentation & release"
      compiler: gcc
      script:
        - $CXX --version
        - . env.sh && mkdoc all && mkrel all

    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    test="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -iSQL/SQLite/src/sqlite3.c .
    # search for TODO within source tree
    - env:    test="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    test="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    test="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    test="sloccount"
      script: sloccount .
